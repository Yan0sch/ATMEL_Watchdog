id: XPiEegDGAizg8tZT
createdBy: zNbWY1QkV7AP
dateCreated: 1750351126309
name: Meine neue Klasse
meta:
  logo: ''
  description: ''
  selfAssign: true
  defaultNumberOfRooms: '3'
members:
  teacher: []
  student: []
modules:
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: '# Der Wachhund Timer'
    studentConfig:
      content: ''
    teacherConfig:
      content: ''
    stationConfig:
      content: ''
    showInCustom: Lobby
    width: full
    height: tall
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: >-
        # Aufgabenkomplex 1

        ## Einführung

        1. Beschäftige dich mit dem Watchdog Timer des ATMega32. Schaue dafür in
        das Datenblatt.

        2. Was sind die Unterschiede bzw. Besonderheiten im Gegensatz zum
        klassischen Timer? Welche Features hat der Watchdog Timer und welche
        nicht?

        3. Wie kann der Watchdog Timer genutzt werden? Welche Register werden
        dazu benötigt?  Gibt es Besonderheiten beim Schreiben der Register?


        ## Hello World! aber mit Wachhund

        1. Die LED an `Pin 13` (`PB5`) soll zum blinken gebracht werden.

        Schaue dir dafür den Code im Editor an.

        2. Fülle die Fehlenden Stellen (`TODO`) aus.
            - Wie muss der Watchdog Timer mittels WDTCSR konfiguriert damit ein Interrupt aber kein Reset ausgelöst wird?
            - Stelle den Prescaler so ein, dass der WDT bei 500 ms überläuft.
            - Wie wird die LED in der Interrupt Subroutine geschalten?

        ### Initialer Code
      
        ```cpp

        #include <avr/io.h>

        #include <avr/interrupt.h>

        #include <util/delay.h>

        #include <Arduino.h>


        #define LED PB5

        ISR(WDT_vect){
            // TODO
        }

        int main() {
            Serial.begin(9600);
            // Pin 13 as output
            DDRB |= 1 << LED;

            // set the change enable bit
            WDTCSR |= 1 << WDCE | 1 << WDE;

            // setup the watchdog timer
            WDTCSR = 0 // TODO

            sei();
            
            while(1);
        }

        ```
    studentConfig:
      content: ''
    teacherConfig:
      content: ''
    stationConfig:
      content: ''
    showInCustom: Raum 1
    width: half
    height: tall
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: >-
        # Aufgabenkomplex 2

        ## Anwendung des Watchdog Timers

        1. Schaue dir die Reset Mechanismen im Datenblatt an. Wie kann man
        auslesen, was den Reset ausgelöst hat?

        2. Schaue dir das Programm im Editor an und starte es. Was passiert
        dabei?

        3. Starte nun auch das Programm für den zweiten Arduino. Dieser sendet
        jetzt jede Sekunde einen externen Reset.

        4. Verifiziere, dass der Reset wirklich extern ausgelöst wurde. Gib das
        z.B. über die Serielle Schnittstelle aus.

        5. Passe das Programm jetzt so an, dass sich der ATMEGA vorher mit dem
        Watchdog Timer selbst resettet. Verifizere auch dass das wirklich
        geklappt hat.

        ### Initaler Code

        ```cpp

        #include <avr/io.h>

        #include <avr/interrupt.h>

        #include <util/delay.h>

        #include <Arduino.h>


        #define LED PB5

        ISR(WDT_vect){
            // brauchen wir das?
        }

        int main() {
            Serial.begin(9600);
            // Serial.println("Irgendeinen den Status")

            // Pin 13 as output
            DDRB |= 1 << LED;

            // set the change enable bit
            WDTCSR |= 1 << WDCE | 1 << WDE;

            // setup the watchdog timer
            WDTCSR = 0; // TODO

            // sei();
            
            for (int i = 0;;i++) {
                PORTB ^= 1 << LED;
                Serial.print("Iterationen: ");
                Serial.println(i);
                _delay_ms(500);
            }
        }

        ```
    studentConfig:
      content: ''
    teacherConfig:
      content: ''
    stationConfig:
      content: ''
    showInCustom: Raum 1
    width: full
    height: tall
  - url: https://edrys-labs.github.io/module-monaco-editor/index.html
    config: ''
    studentConfig: ''
    teacherConfig: ''
    stationConfig: ''
    showInCustom: Raum 1
    width: full
    height: tall
  - url: https://edrys-labs.github.io/module-streaming/index.html
    config: ''
    studentConfig: ''
    teacherConfig: ''
    stationConfig: ''
    showInCustom: '*'
    width: third
    height: short
